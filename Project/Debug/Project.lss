
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000df  00800100  00800100  00000a28  2**0
                  ALLOC
  2 .stab         00001674  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000544  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000548  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d19  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00003981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1c  00000000  00000000  00003fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00004f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000254  00000000  00000000  0000584c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000001b1  00000000  00000000  00005aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_28>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_32>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 3d       	cpi	r26, 0xDF	; 223
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 84 01 	call	0x308	; 0x308 <main>
  ac:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <adc_initialisation>:


void adc_initialisation()
{
	/* Select ADC Channel ADC0 enabled */
	ADMUX = 0x00;
  b4:	10 92 7c 00 	sts	0x007C, r1

	/* set pre-scaler with ADCSRA bits to 128 */
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24

	/* Enable Interrupt Enable */
	//ADCSRA|=(1<<ADIE);

	/* Switch ON ADC */
	ADCSRA|=(1<<ADEN);
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
}
  c8:	08 95       	ret

000000ca <adc_get_mv>:


T_UWORD adc_get_mv(T_UBYTE channel)
{
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
	ADMUX = 0;
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;
  d0:	90 81       	ld	r25, Z



T_UWORD adc_get_mv(T_UBYTE channel)
{
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
  d2:	87 70       	andi	r24, 0x07	; 7
	ADMUX = 0;
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;
  d4:	98 2b       	or	r25, r24
  d6:	90 83       	st	Z, r25

	if(!(ADCSRA & (1<<ADSC)))
  d8:	80 91 7a 00 	lds	r24, 0x007A
  dc:	86 fd       	sbrc	r24, 6
  de:	1d c0       	rjmp	.+58     	; 0x11a <adc_get_mv+0x50>
	{
		luw_get_result=ADC;
  e0:	60 91 78 00 	lds	r22, 0x0078
  e4:	70 91 79 00 	lds	r23, 0x0079
  e8:	70 93 01 01 	sts	0x0101, r23
  ec:	60 93 00 01 	sts	0x0100, r22
		ADCSRA |=(1<<ADSC);	// enable ADC and start single conversion
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
		luw_get_result = (luw_get_result * 4.887585532746823) ; // 4.887585532746823 is quanta of convertor
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__floatunsisf>
 102:	2a e1       	ldi	r18, 0x1A	; 26
 104:	37 e6       	ldi	r19, 0x67	; 103
 106:	4c e9       	ldi	r20, 0x9C	; 156
 108:	50 e4       	ldi	r21, 0x40	; 64
 10a:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3>
 10e:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixunssfsi>
 112:	70 93 01 01 	sts	0x0101, r23
 116:	60 93 00 01 	sts	0x0100, r22
	}

return luw_get_result;
}
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	08 95       	ret

00000124 <adc_get_mv_filtered_value>:

T_UWORD adc_get_mv_filtered_value(E_ADC_CH channel)
{
	luw_result =
	(s_filtered_adc[channel].luw_mV[0] +
 124:	90 e0       	ldi	r25, 0x00	; 0
	s_filtered_adc[channel].luw_mV[1] +
 126:	9c 01       	movw	r18, r24
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	82 0f       	add	r24, r18
 12e:	93 1f       	adc	r25, r19
 130:	fc 01       	movw	r30, r24
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e8 1b       	sub	r30, r24
 140:	f9 0b       	sbc	r31, r25
 142:	e6 5d       	subi	r30, 0xD6	; 214
 144:	fe 4f       	sbci	r31, 0xFE	; 254
}

T_UWORD adc_get_mv_filtered_value(E_ADC_CH channel)
{
	luw_result =
	(s_filtered_adc[channel].luw_mV[0] +
 146:	23 81       	ldd	r18, Z+3	; 0x03
 148:	34 81       	ldd	r19, Z+4	; 0x04
 14a:	81 81       	ldd	r24, Z+1	; 0x01
 14c:	92 81       	ldd	r25, Z+2	; 0x02
 14e:	82 0f       	add	r24, r18
 150:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[1] +
 152:	25 81       	ldd	r18, Z+5	; 0x05
 154:	36 81       	ldd	r19, Z+6	; 0x06
 156:	82 0f       	add	r24, r18
 158:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[2] +
 15a:	27 81       	ldd	r18, Z+7	; 0x07
 15c:	30 85       	ldd	r19, Z+8	; 0x08
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[3] +
 162:	21 85       	ldd	r18, Z+9	; 0x09
 164:	32 85       	ldd	r19, Z+10	; 0x0a
 166:	82 0f       	add	r24, r18
 168:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[4] +
 16a:	23 85       	ldd	r18, Z+11	; 0x0b
 16c:	34 85       	ldd	r19, Z+12	; 0x0c
 16e:	82 0f       	add	r24, r18
 170:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[5] +
 172:	25 85       	ldd	r18, Z+13	; 0x0d
 174:	36 85       	ldd	r19, Z+14	; 0x0e
 176:	82 0f       	add	r24, r18
 178:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[6] +
 17a:	27 85       	ldd	r18, Z+15	; 0x0f
 17c:	30 89       	ldd	r19, Z+16	; 0x10
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[7] +
 182:	21 89       	ldd	r18, Z+17	; 0x11
 184:	32 89       	ldd	r19, Z+18	; 0x12
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[8] +
 18a:	23 89       	ldd	r18, Z+19	; 0x13
 18c:	34 89       	ldd	r19, Z+20	; 0x14
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
	s_filtered_adc[channel].luw_mV[9])
	/ 10;
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
return luw_get_result;
}

T_UWORD adc_get_mv_filtered_value(E_ADC_CH channel)
{
	luw_result =
 19a:	60 93 04 01 	sts	0x0104, r22
 19e:	70 93 05 01 	sts	0x0105, r23
	s_filtered_adc[channel].luw_mV[8] +
	s_filtered_adc[channel].luw_mV[9])
	/ 10;

return luw_result;
}
 1a2:	86 2f       	mov	r24, r22
 1a4:	97 2f       	mov	r25, r23
 1a6:	08 95       	ret

000001a8 <adc_update_filtered_result>:


void adc_update_filtered_result(void)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char ch;
	for(ch=0;ch<ADC_max_ch;ch++)
	{
		s_filtered_adc[ch].luw_mV[ruw_sample] = adc_get_mv(ch);
 1b8:	0f 2e       	mov	r0, r31
 1ba:	fa e2       	ldi	r31, 0x2A	; 42
 1bc:	ef 2e       	mov	r14, r31
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	ff 2e       	mov	r15, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	c0 91 02 01 	lds	r28, 0x0102
 1c8:	d0 91 03 01 	lds	r29, 0x0103
 1cc:	80 2f       	mov	r24, r16
 1ce:	0e 94 65 00 	call	0xca	; 0xca <adc_get_mv>
 1d2:	ae 01       	movw	r20, r28
 1d4:	44 0f       	add	r20, r20
 1d6:	55 1f       	adc	r21, r21
 1d8:	98 01       	movw	r18, r16
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	20 0f       	add	r18, r16
 1e0:	31 1f       	adc	r19, r17
 1e2:	e9 01       	movw	r28, r18
 1e4:	cc 0f       	add	r28, r28
 1e6:	dd 1f       	adc	r29, r29
 1e8:	cc 0f       	add	r28, r28
 1ea:	dd 1f       	adc	r29, r29
 1ec:	cc 0f       	add	r28, r28
 1ee:	dd 1f       	adc	r29, r29
 1f0:	c2 1b       	sub	r28, r18
 1f2:	d3 0b       	sbc	r29, r19
 1f4:	c4 0f       	add	r28, r20
 1f6:	d5 1f       	adc	r29, r21
 1f8:	ce 0d       	add	r28, r14
 1fa:	df 1d       	adc	r29, r15
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	0f 5f       	subi	r16, 0xFF	; 255
 202:	1f 4f       	sbci	r17, 0xFF	; 255


void adc_update_filtered_result(void)
{
	unsigned char ch;
	for(ch=0;ch<ADC_max_ch;ch++)
 204:	08 30       	cpi	r16, 0x08	; 8
 206:	11 05       	cpc	r17, r1
 208:	e9 f6       	brne	.-70     	; 0x1c4 <adc_update_filtered_result+0x1c>
	{
		s_filtered_adc[ch].luw_mV[ruw_sample] = adc_get_mv(ch);
	}

	if(ruw_sample>=9)
 20a:	80 91 02 01 	lds	r24, 0x0102
 20e:	90 91 03 01 	lds	r25, 0x0103
 212:	89 30       	cpi	r24, 0x09	; 9
 214:	91 05       	cpc	r25, r1
 216:	28 f0       	brcs	.+10     	; 0x222 <adc_update_filtered_result+0x7a>
	{
		ruw_sample = 0;
 218:	10 92 03 01 	sts	0x0103, r1
 21c:	10 92 02 01 	sts	0x0102, r1
 220:	05 c0       	rjmp	.+10     	; 0x22c <adc_update_filtered_result+0x84>
	}
	else
	{
		ruw_sample++;
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 03 01 	sts	0x0103, r25
 228:	80 93 02 01 	sts	0x0102, r24
	}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <turn_off_led>:
	}
 }

void turn_off_led()
{
	PORTB &=~(1<<PINB0);
 23a:	28 98       	cbi	0x05, 0	; 5
}
 23c:	08 95       	ret

0000023e <turn_on_led>:

void turn_on_led()
{
	PORTB |=(1<<PINB0);
 23e:	28 9a       	sbi	0x05, 0	; 5
 240:	08 95       	ret

00000242 <Led_Blink_main>:

 unsigned int rub_temperature = 0;

 void Led_Blink_main()
 {
	rub_temperature = LM50_get_temp();
 242:	0e 94 30 01 	call	0x260	; 0x260 <LM50_get_temp>
 246:	90 93 07 01 	sts	0x0107, r25
 24a:	80 93 06 01 	sts	0x0106, r24
	if(rub_temperature >= 240)
 24e:	80 3f       	cpi	r24, 0xF0	; 240
 250:	91 05       	cpc	r25, r1
 252:	18 f0       	brcs	.+6      	; 0x25a <Led_Blink_main+0x18>
	{
		turn_off_led();
 254:	0e 94 1d 01 	call	0x23a	; 0x23a <turn_off_led>
 258:	08 95       	ret
	}
	else
	{
		turn_on_led();
 25a:	0e 94 1f 01 	call	0x23e	; 0x23e <turn_on_led>
 25e:	08 95       	ret

00000260 <LM50_get_temp>:
T_UWORD ruw_mV = 0, 
		temp = 0;

T_UWORD LM50_get_temp()
{
	ruw_mV = adc_get_mv_filtered_value(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
	temp = ruw_mV - 485; // 500 value defined by datasheet
 266:	9c 01       	movw	r18, r24
 268:	25 5e       	subi	r18, 0xE5	; 229
 26a:	31 40       	sbci	r19, 0x01	; 1
 26c:	30 93 0b 01 	sts	0x010B, r19
 270:	20 93 0a 01 	sts	0x010A, r18
	ruw_mV = 0;
 274:	10 92 09 01 	sts	0x0109, r1
 278:	10 92 08 01 	sts	0x0108, r1
	return temp;
 27c:	82 2f       	mov	r24, r18
 27e:	93 2f       	mov	r25, r19
 280:	08 95       	ret

00000282 <tr_update_temp>:


 T_UBYTE lub_temp_val;
 T_UBYTE caub_adc_mv[8];
 void tr_update_temp(void)
 {
 282:	1f 93       	push	r17
	unsigned int whole_val = LM50_get_temp();
 284:	0e 94 30 01 	call	0x260	; 0x260 <LM50_get_temp>
	lub_temp_val = whole_val / 10 ;
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
 290:	18 2f       	mov	r17, r24
 292:	60 93 d2 01 	sts	0x01D2, r22
	}
	else
	{
		/* Nothing to do */
	}
	USART_Transmit(whole_val / 10);
 296:	86 2f       	mov	r24, r22
 298:	0e 94 12 03 	call	0x624	; 0x624 <USART_Transmit>
	USART_Transmit(whole_val % 10);
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 12 03 	call	0x624	; 0x624 <USART_Transmit>
 }
 2a2:	1f 91       	pop	r17
 2a4:	08 95       	ret

000002a6 <tr_get_updated_adc_values>:
 
 void tr_get_updated_adc_values()
 {
	 caub_adc_mv[0] = adc_get_mv_filtered_value(0);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2ae:	80 93 d3 01 	sts	0x01D3, r24
	 caub_adc_mv[1] = adc_get_mv_filtered_value(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2ba:	80 93 d4 01 	sts	0x01D4, r24
	 caub_adc_mv[2] = adc_get_mv_filtered_value(2);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2c6:	80 93 d5 01 	sts	0x01D5, r24
	 caub_adc_mv[3] = adc_get_mv_filtered_value(3);
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2d2:	80 93 d6 01 	sts	0x01D6, r24
	 caub_adc_mv[4] = adc_get_mv_filtered_value(4);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2de:	80 93 d7 01 	sts	0x01D7, r24
	 caub_adc_mv[5] = adc_get_mv_filtered_value(5);
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2ea:	80 93 d8 01 	sts	0x01D8, r24
	 caub_adc_mv[6] = adc_get_mv_filtered_value(6);
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 2f6:	80 93 d9 01 	sts	0x01D9, r24
	 caub_adc_mv[7] = adc_get_mv_filtered_value(7);
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 92 00 	call	0x124	; 0x124 <adc_get_mv_filtered_value>
 302:	80 93 da 01 	sts	0x01DA, r24
 306:	08 95       	ret

00000308 <main>:
 	T_UWORD luw_previous_5ms_counter = 0;
 	T_UWORD luw_previous_10ms_counter = 0;
 	T_UWORD luw_previous_100ms_counter = 0;

int main(void)
{
 308:	5f 92       	push	r5
 30a:	6f 92       	push	r6
 30c:	7f 92       	push	r7
 30e:	8f 92       	push	r8
 310:	9f 92       	push	r9
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
			lub_20ms_flag = FALSE,
			lub_50ms_flag = FALSE,
			lub_100ms_flag = FALSE,
			lub_1sec_flag = FALSE;

	luw_previous_ms = 0;
 326:	10 92 0d 01 	sts	0x010D, r1
 32a:	10 92 0c 01 	sts	0x010C, r1
	luw_previous_sec = 0;
 32e:	10 92 0e 01 	sts	0x010E, r1
 	luw_CURRENT_ms = 0;
 332:	10 92 10 01 	sts	0x0110, r1
 336:	10 92 0f 01 	sts	0x010F, r1
	luw_CURRENT_sec = 0;
 33a:	10 92 11 01 	sts	0x0111, r1
 	luw_previous_5ms_counter = 0;
 33e:	10 92 13 01 	sts	0x0113, r1
 342:	10 92 12 01 	sts	0x0112, r1
 	luw_previous_10ms_counter = 0;
 346:	10 92 15 01 	sts	0x0115, r1
 34a:	10 92 14 01 	sts	0x0114, r1
 	luw_previous_100ms_counter = 0;
 34e:	10 92 17 01 	sts	0x0117, r1
 352:	10 92 16 01 	sts	0x0116, r1

	zinit_app_init_function();
 356:	0e 94 2f 03 	call	0x65e	; 0x65e <zinit_app_init_function>
	T_UBYTE lub_5ms_flag = FALSE, 
			lub_10ms_flag = FALSE,
			lub_20ms_flag = FALSE,
			lub_50ms_flag = FALSE,
			lub_100ms_flag = FALSE,
			lub_1sec_flag = FALSE;
 35a:	00 e0       	ldi	r16, 0x00	; 0
{
	T_UBYTE lub_5ms_flag = FALSE, 
			lub_10ms_flag = FALSE,
			lub_20ms_flag = FALSE,
			lub_50ms_flag = FALSE,
			lub_100ms_flag = FALSE,
 35c:	77 24       	eor	r7, r7

int main(void)
{
	T_UBYTE lub_5ms_flag = FALSE, 
			lub_10ms_flag = FALSE,
			lub_20ms_flag = FALSE,
 35e:	66 24       	eor	r6, r6
 	T_UWORD luw_previous_100ms_counter = 0;

int main(void)
{
	T_UBYTE lub_5ms_flag = FALSE, 
			lub_10ms_flag = FALSE,
 360:	55 24       	eor	r5, r5
 	T_UWORD luw_previous_10ms_counter = 0;
 	T_UWORD luw_previous_100ms_counter = 0;

int main(void)
{
	T_UBYTE lub_5ms_flag = FALSE, 
 362:	10 e0       	ldi	r17, 0x00	; 0

		if(luw_previous_ms != luw_CURRENT_ms)
		{
			zapp_1ms_TASK();
			luw_previous_ms = luw_CURRENT_ms;
			lub_5ms_flag = TRUE;
 364:	99 24       	eor	r9, r9
 366:	93 94       	inc	r9
		}

		if( ((luw_CURRENT_ms % 5) == 0x00) && lub_5ms_flag ) /* 5 milliseconds passed */
 368:	c5 e0       	ldi	r28, 0x05	; 5
 36a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			zapp_5ms_TASK();
			lub_5ms_flag = FALSE;
 36c:	88 24       	eor	r8, r8
			lub_10ms_flag = TRUE;

		}

		if( ((luw_CURRENT_ms % 10) == 0x00) && lub_10ms_flag ) /* 5 milliseconds passed */
 36e:	0f 2e       	mov	r0, r31
 370:	fa e0       	ldi	r31, 0x0A	; 10
 372:	ef 2e       	mov	r14, r31
 374:	ff 24       	eor	r15, r15
 376:	f0 2d       	mov	r31, r0
			lub_20ms_flag = TRUE;
			lub_50ms_flag = FALSE;
			lub_100ms_flag = TRUE;
		}

		if( ((luw_CURRENT_ms % 20) == 0x00) && lub_20ms_flag ) /* 5 milliseconds passed */
 378:	0f 2e       	mov	r0, r31
 37a:	f4 e1       	ldi	r31, 0x14	; 20
 37c:	cf 2e       	mov	r12, r31
 37e:	dd 24       	eor	r13, r13
 380:	f0 2d       	mov	r31, r0
			zapp_50ms_TASK();
			lub_50ms_flag = FALSE;
			lub_100ms_flag = TRUE;
		}

		if(  ((luw_CURRENT_ms % 100) == 0x00) && lub_100ms_flag ) /* 5 milliseconds passed */
 382:	0f 2e       	mov	r0, r31
 384:	f4 e6       	ldi	r31, 0x64	; 100
 386:	af 2e       	mov	r10, r31
 388:	bb 24       	eor	r11, r11
 38a:	f0 2d       	mov	r31, r0
	zinit_app_init_function();
	
	while(1)
	{
	//cli();	// DISABLE INTERRUPTS
		luw_CURRENT_ms = timers_get_miliseconds();
 38c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <timers_get_miliseconds>
 390:	90 93 10 01 	sts	0x0110, r25
 394:	80 93 0f 01 	sts	0x010F, r24
		luw_CURRENT_sec = timers_get_seconds();
 398:	0e 94 fe 02 	call	0x5fc	; 0x5fc <timers_get_seconds>
 39c:	80 93 11 01 	sts	0x0111, r24

		if(luw_previous_ms != luw_CURRENT_ms)
 3a0:	20 91 0c 01 	lds	r18, 0x010C
 3a4:	30 91 0d 01 	lds	r19, 0x010D
 3a8:	80 91 0f 01 	lds	r24, 0x010F
 3ac:	90 91 10 01 	lds	r25, 0x0110
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	59 f0       	breq	.+22     	; 0x3cc <main+0xc4>
		{
			zapp_1ms_TASK();
 3b6:	0e 94 66 03 	call	0x6cc	; 0x6cc <zapp_1ms_TASK>
			luw_previous_ms = luw_CURRENT_ms;
 3ba:	80 91 0f 01 	lds	r24, 0x010F
 3be:	90 91 10 01 	lds	r25, 0x0110
 3c2:	90 93 0d 01 	sts	0x010D, r25
 3c6:	80 93 0c 01 	sts	0x010C, r24
			lub_5ms_flag = TRUE;
 3ca:	19 2d       	mov	r17, r9
		}

		if( ((luw_CURRENT_ms % 5) == 0x00) && lub_5ms_flag ) /* 5 milliseconds passed */
 3cc:	80 91 0f 01 	lds	r24, 0x010F
 3d0:	90 91 10 01 	lds	r25, 0x0110
 3d4:	be 01       	movw	r22, r28
 3d6:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	31 f4       	brne	.+12     	; 0x3ea <main+0xe2>
 3de:	11 23       	and	r17, r17
 3e0:	21 f0       	breq	.+8      	; 0x3ea <main+0xe2>
		{
			zapp_5ms_TASK();
 3e2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <zapp_5ms_TASK>
			lub_5ms_flag = FALSE;
			lub_10ms_flag = TRUE;
 3e6:	59 2c       	mov	r5, r9
		}

		if( ((luw_CURRENT_ms % 5) == 0x00) && lub_5ms_flag ) /* 5 milliseconds passed */
		{
			zapp_5ms_TASK();
			lub_5ms_flag = FALSE;
 3e8:	18 2d       	mov	r17, r8
			lub_10ms_flag = TRUE;

		}

		if( ((luw_CURRENT_ms % 10) == 0x00) && lub_10ms_flag ) /* 5 milliseconds passed */
 3ea:	80 91 0f 01 	lds	r24, 0x010F
 3ee:	90 91 10 01 	lds	r25, 0x0110
 3f2:	b7 01       	movw	r22, r14
 3f4:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	39 f4       	brne	.+14     	; 0x40a <main+0x102>
 3fc:	55 20       	and	r5, r5
 3fe:	29 f0       	breq	.+10     	; 0x40a <main+0x102>
		{
			zapp_10ms_TASK();
 400:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <zapp_10ms_TASK>
			lub_10ms_flag = FALSE;
			lub_20ms_flag = TRUE;
			lub_50ms_flag = FALSE;
			lub_100ms_flag = TRUE;
 404:	79 2c       	mov	r7, r9

		if( ((luw_CURRENT_ms % 10) == 0x00) && lub_10ms_flag ) /* 5 milliseconds passed */
		{
			zapp_10ms_TASK();
			lub_10ms_flag = FALSE;
			lub_20ms_flag = TRUE;
 406:	69 2c       	mov	r6, r9
		}

		if( ((luw_CURRENT_ms % 10) == 0x00) && lub_10ms_flag ) /* 5 milliseconds passed */
		{
			zapp_10ms_TASK();
			lub_10ms_flag = FALSE;
 408:	58 2c       	mov	r5, r8
			lub_20ms_flag = TRUE;
			lub_50ms_flag = FALSE;
			lub_100ms_flag = TRUE;
		}

		if( ((luw_CURRENT_ms % 20) == 0x00) && lub_20ms_flag ) /* 5 milliseconds passed */
 40a:	80 91 0f 01 	lds	r24, 0x010F
 40e:	90 91 10 01 	lds	r25, 0x0110
 412:	b6 01       	movw	r22, r12
 414:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	29 f4       	brne	.+10     	; 0x426 <main+0x11e>
 41c:	66 20       	and	r6, r6
 41e:	19 f0       	breq	.+6      	; 0x426 <main+0x11e>
		{
			zapp_20ms_TASK();
 420:	0e 94 84 03 	call	0x708	; 0x708 <zapp_20ms_TASK>
			lub_20ms_flag = FALSE;
 424:	68 2c       	mov	r6, r8
			zapp_50ms_TASK();
			lub_50ms_flag = FALSE;
			lub_100ms_flag = TRUE;
		}

		if(  ((luw_CURRENT_ms % 100) == 0x00) && lub_100ms_flag ) /* 5 milliseconds passed */
 426:	80 91 0f 01 	lds	r24, 0x010F
 42a:	90 91 10 01 	lds	r25, 0x0110
 42e:	b5 01       	movw	r22, r10
 430:	0e 94 c4 04 	call	0x988	; 0x988 <__udivmodhi4>
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	31 f4       	brne	.+12     	; 0x444 <main+0x13c>
 438:	77 20       	and	r7, r7
 43a:	21 f0       	breq	.+8      	; 0x444 <main+0x13c>
		{
			zapp_100ms_TASK();
 43c:	0e 94 98 03 	call	0x730	; 0x730 <zapp_100ms_TASK>
			lub_1sec_flag++;
 440:	0f 5f       	subi	r16, 0xFF	; 255
			lub_100ms_flag = FALSE;
 442:	78 2c       	mov	r7, r8
		}

		if((luw_previous_sec < luw_CURRENT_sec) && (lub_1sec_flag >= 10) )
 444:	90 91 0e 01 	lds	r25, 0x010E
 448:	80 91 11 01 	lds	r24, 0x0111
 44c:	98 17       	cp	r25, r24
 44e:	08 f0       	brcs	.+2      	; 0x452 <main+0x14a>
 450:	9d cf       	rjmp	.-198    	; 0x38c <main+0x84>
 452:	0a 30       	cpi	r16, 0x0A	; 10
 454:	08 f4       	brcc	.+2      	; 0x458 <main+0x150>
 456:	9a cf       	rjmp	.-204    	; 0x38c <main+0x84>
		{
			zapp_1sec_TASK();
 458:	0e 94 a4 03 	call	0x748	; 0x748 <zapp_1sec_TASK>
			lub_1sec_flag = FALSE;
			luw_previous_sec = luw_CURRENT_sec;
 45c:	80 91 11 01 	lds	r24, 0x0111
 460:	80 93 0e 01 	sts	0x010E, r24
		}

		if((luw_previous_sec < luw_CURRENT_sec) && (lub_1sec_flag >= 10) )
		{
			zapp_1sec_TASK();
			lub_1sec_flag = FALSE;
 464:	08 2d       	mov	r16, r8
 466:	92 cf       	rjmp	.-220    	; 0x38c <main+0x84>

00000468 <rf_USART_Init>:
#define LEDOFF 0x22//switch led off command

void rf_USART_Init(void)
{
	//Set baud rate	
	UBRR1L=(T_UBYTE)BAUDRATE_1200_UBRR_VAL;		//low byte	
 468:	82 e1       	ldi	r24, 0x12	; 18
 46a:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H=(T_UBYTE)BAUDRATE_1200_UBRR_VAL;	//high byte	
 46e:	80 93 cd 00 	sts	0x00CD, r24
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size	
	UCSR1C=(0<<UMSEL11)|(0<<UMSEL10)|(0<<UPM11)|(0<<UPM10) |	(0<<USBS1)|(0<<UCSZ12)|(1<<UCSZ11)|(1<<UCSZ10);		
 472:	86 e0       	ldi	r24, 0x06	; 6
 474:	80 93 ca 00 	sts	0x00CA, r24
	//Enable Transmitter and Receiver and Interrupt on receive complete	
	UCSR1B=(1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);
 478:	88 e9       	ldi	r24, 0x98	; 152
 47a:	80 93 c9 00 	sts	0x00C9, r24
}
 47e:	08 95       	ret

00000480 <rf_USART_vReceiveByte>:

T_UBYTE rf_USART_vReceiveByte(void)
{
	// Wait until a byte has been received
	while((UCSR1A&(1<<RXC1)) == 0);
 480:	e8 ec       	ldi	r30, 0xC8	; 200
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	88 23       	and	r24, r24
 488:	ec f7       	brge	.-6      	; 0x484 <rf_USART_vReceiveByte+0x4>
	// Return received data
	return UDR1;
 48a:	80 91 ce 00 	lds	r24, 0x00CE
}
 48e:	08 95       	ret

00000490 <rf_USART_vSendByte>:

void rf_USART_vSendByte(T_UBYTE u8Data)
{    
	T_UBYTE data = 0;
	// Wait if a byte is being transmitted    
	while((UCSR1A&(1<<UDRE1)) == 0);    
 490:	e8 ec       	ldi	r30, 0xC8	; 200
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	90 81       	ld	r25, Z
 496:	95 ff       	sbrs	r25, 5
 498:	fd cf       	rjmp	.-6      	; 0x494 <rf_USART_vSendByte+0x4>
	
	// Transmit data    
	UDR1 = u8Data;  
 49a:	80 93 ce 00 	sts	0x00CE, r24
	data = u8Data;
	u8Data = 0;
}
 49e:	08 95       	ret

000004a0 <rf_Send_Packet>:

void rf_Send_Packet(T_UBYTE addr, T_UBYTE cmd)
{
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	18 2f       	mov	r17, r24
 4a6:	06 2f       	mov	r16, r22
	rf_USART_vSendByte(SYNC);//send synchro byte		
 4a8:	8a ea       	ldi	r24, 0xAA	; 170
 4aa:	0e 94 48 02 	call	0x490	; 0x490 <rf_USART_vSendByte>
	rf_USART_vSendByte(addr);//send receiver address	
 4ae:	81 2f       	mov	r24, r17
 4b0:	0e 94 48 02 	call	0x490	; 0x490 <rf_USART_vSendByte>
	rf_USART_vSendByte(cmd);//send increment command	
 4b4:	80 2f       	mov	r24, r16
 4b6:	0e 94 48 02 	call	0x490	; 0x490 <rf_USART_vSendByte>
	rf_USART_vSendByte((addr+cmd));//send checksum
 4ba:	80 2f       	mov	r24, r16
 4bc:	81 0f       	add	r24, r17
 4be:	0e 94 48 02 	call	0x490	; 0x490 <rf_USART_vSendByte>
}
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <__vector_28>:

ISR(USART1_RX_vect)
{
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	0b b6       	in	r0, 0x3b	; 59
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	//define variables
	T_UBYTE data[5]={0,0,0,0,0};	//transmitter address

	data[0]=rf_USART_vReceiveByte();
 4ee:	0e 94 40 02 	call	0x480	; 0x480 <rf_USART_vReceiveByte>
	data[1]=rf_USART_vReceiveByte();
 4f2:	0e 94 40 02 	call	0x480	; 0x480 <rf_USART_vReceiveByte>
	data[2]=rf_USART_vReceiveByte();
 4f6:	0e 94 40 02 	call	0x480	; 0x480 <rf_USART_vReceiveByte>
	data[3]=rf_USART_vReceiveByte();
 4fa:	0e 94 40 02 	call	0x480	; 0x480 <rf_USART_vReceiveByte>
	data[4]=rf_USART_vReceiveByte();
 4fe:	0e 94 40 02 	call	0x480	; 0x480 <rf_USART_vReceiveByte>
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0b be       	out	0x3b, r0	; 59
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <timers_timer0_initialize_FAST_PWM>:

 /* initialization of TIMER0 in FAST PWM Mode */
void timers_timer0_initialize_FAST_PWM(void)
 {
	 // initialize timer0 in PWM mode
	 TCCR0A |= (1<<WGM00)| (1<<COM0A1) | (1<<WGM01);
 528:	84 b5       	in	r24, 0x24	; 36
 52a:	83 68       	ori	r24, 0x83	; 131
 52c:	84 bd       	out	0x24, r24	; 36
	 TCCR0B |= (1<<CS00);
 52e:	85 b5       	in	r24, 0x25	; 37
 530:	81 60       	ori	r24, 0x01	; 1
 532:	85 bd       	out	0x25, r24	; 37
	 // make sure to make OC0 pin (pin PB3 for atmega32) as output pin
	 DDRB |= (1<<PINB3);
 534:	23 9a       	sbi	0x04, 3	; 4
 }
 536:	08 95       	ret

00000538 <timers_timer3_init>:

 /* System time timer */
void timers_timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 538:	e0 e9       	ldi	r30, 0x90	; 144
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 542:	e1 e9       	ldi	r30, 0x91	; 145
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	88 60       	ori	r24, 0x08	; 8
 54a:	80 83       	st	Z, r24
	// set up timer with no presscaler count to 500
	TCCR3B |= (1 << CS30);
 54c:	80 81       	ld	r24, Z
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 558:	84 ef       	ldi	r24, 0xF4	; 244
 55a:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 55e:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 562:	10 92 94 00 	sts	0x0094, r1

	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 566:	e1 e7       	ldi	r30, 0x71	; 113
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	83 60       	ori	r24, 0x03	; 3
 56e:	80 83       	st	Z, r24
}
 570:	08 95       	ret

00000572 <__vector_32>:

/* Interrupt generated at every 25 microseconds */
ISR(TIMER3_COMPA_vect)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
	
	// initialize counter
	TCNT3H = 0;
 582:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 586:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	lub_timers_25micro_step++;
 58a:	80 91 18 01 	lds	r24, 0x0118
 58e:	8f 5f       	subi	r24, 0xFF	; 255
 590:	80 93 18 01 	sts	0x0118, r24

	if(lub_timers_25micro_step>=40) /* 1ms counted */
 594:	88 32       	cpi	r24, 0x28	; 40
 596:	28 f1       	brcs	.+74     	; 0x5e2 <__vector_32+0x70>
	{	
	
		system_time.ms++;
 598:	80 91 db 01 	lds	r24, 0x01DB
 59c:	90 91 dc 01 	lds	r25, 0x01DC
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	90 93 dc 01 	sts	0x01DC, r25
 5a6:	80 93 db 01 	sts	0x01DB, r24

		if (system_time.ms >= 1000 )/* 1 second counted */
 5aa:	23 e0       	ldi	r18, 0x03	; 3
 5ac:	88 3e       	cpi	r24, 0xE8	; 232
 5ae:	92 07       	cpc	r25, r18
 5b0:	b0 f0       	brcs	.+44     	; 0x5de <__vector_32+0x6c>
		{
			system_time.sec++;
 5b2:	80 91 dd 01 	lds	r24, 0x01DD
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	80 93 dd 01 	sts	0x01DD, r24
			system_time.ms=0;
 5bc:	10 92 dc 01 	sts	0x01DC, r1
 5c0:	10 92 db 01 	sts	0x01DB, r1

			if(system_time.sec >= 60 ) /* 1 minute counted */
 5c4:	8c 33       	cpi	r24, 0x3C	; 60
 5c6:	58 f0       	brcs	.+22     	; 0x5de <__vector_32+0x6c>
			{
				system_time.min++;
 5c8:	80 91 de 01 	lds	r24, 0x01DE
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	80 93 de 01 	sts	0x01DE, r24
				system_time.sec=0;
 5d2:	10 92 dd 01 	sts	0x01DD, r1
				
				if(system_time.min >= 60) /* 1 hour counted */
 5d6:	8c 33       	cpi	r24, 0x3C	; 60
 5d8:	10 f0       	brcs	.+4      	; 0x5de <__vector_32+0x6c>
				{
					system_time.min=0;
 5da:	10 92 de 01 	sts	0x01DE, r1
		}
		else
		{
			/* Do Nothing */
		}
		lub_timers_25micro_step=0;	/* reset 25micro step */
 5de:	10 92 18 01 	sts	0x0118, r1
	}
	else
	{
		/* Do Nothing */
	}
}
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <timers_get_miliseconds>:
unsigned int timers_get_miliseconds()
{	
	unsigned int luw_temp_ms;
	luw_temp_ms = system_time.ms;
return luw_temp_ms;
}
 5f2:	80 91 db 01 	lds	r24, 0x01DB
 5f6:	90 91 dc 01 	lds	r25, 0x01DC
 5fa:	08 95       	ret

000005fc <timers_get_seconds>:
unsigned char timers_get_seconds()
{
	unsigned char luw_temp_sec;
	luw_temp_sec = system_time.sec;
	return luw_temp_sec;
}
 5fc:	80 91 dd 01 	lds	r24, 0x01DD
 600:	08 95       	ret

00000602 <timers_get_minutes>:
unsigned char timers_get_minutes()
{
	unsigned char luw_temp_min;
	luw_temp_min = system_time.sec;
	return luw_temp_min;
 602:	80 91 dd 01 	lds	r24, 0x01DD
 606:	08 95       	ret

00000608 <USART_Init>:

 /* USART0 initialization */
void USART_Init()
 {
	 /* Set baud rate */
	 UBRR0H = (T_UBYTE)(UART_PC_UBRR_9600>>8);
 608:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = (T_UBYTE)UART_PC_UBRR_9600;
 60c:	82 e8       	ldi	r24, 0x82	; 130
 60e:	80 93 c4 00 	sts	0x00C4, r24
	 /* Enable receiver and transmitter */
	 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 612:	88 e1       	ldi	r24, 0x18	; 24
 614:	80 93 c1 00 	sts	0x00C1, r24
	 /* Set frame format: */
	 //UCSR0C |= (1<<USBS0); /* 2stop bit */
	 UCSR0C |= (3<<UCSZ00); /* 8data */
 618:	e2 ec       	ldi	r30, 0xC2	; 194
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	86 60       	ori	r24, 0x06	; 6
 620:	80 83       	st	Z, r24
 }
 622:	08 95       	ret

00000624 <USART_Transmit>:
 /* USART0 Transmission 8 data bit at once */
void USART_Transmit( T_UBYTE data )
 {
	 /* Wait for empty transmit buffer */
	 while ( !( UCSR0A & (1<<UDRE0)) )
 624:	e0 ec       	ldi	r30, 0xC0	; 192
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	90 81       	ld	r25, Z
 62a:	95 ff       	sbrs	r25, 5
 62c:	fd cf       	rjmp	.-6      	; 0x628 <USART_Transmit+0x4>
	 ;
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
 62e:	80 93 c6 00 	sts	0x00C6, r24
 }
 632:	08 95       	ret

00000634 <USART_Receive>:
 /* USART0 Reception 8 bit of data */
T_UBYTE USART_Receive(void)
 {
	 /* Wait for data to be received */
	 while ( !(UCSR0A & (1<<RXC0)) )
 634:	e0 ec       	ldi	r30, 0xC0	; 192
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	88 23       	and	r24, r24
 63c:	ec f7       	brge	.-6      	; 0x638 <USART_Receive+0x4>
	 ;
	 /* Get and return received data from buffer */
	 return UDR0;
 63e:	80 91 c6 00 	lds	r24, 0x00C6
 }
 642:	08 95       	ret

00000644 <USART_Flush>:
 /* USART0 Flush of data */
void USART_Flush( void )
 {
	 while ( UCSR0A & (1<<RXC0) )
 644:	80 91 c0 00 	lds	r24, 0x00C0
 648:	88 23       	and	r24, r24
 64a:	44 f4       	brge	.+16     	; 0x65c <USART_Flush+0x18>
	 (void)UDR0;
 64c:	a6 ec       	ldi	r26, 0xC6	; 198
 64e:	b0 e0       	ldi	r27, 0x00	; 0
	 return UDR0;
 }
 /* USART0 Flush of data */
void USART_Flush( void )
 {
	 while ( UCSR0A & (1<<RXC0) )
 650:	e0 ec       	ldi	r30, 0xC0	; 192
 652:	f0 e0       	ldi	r31, 0x00	; 0
	 (void)UDR0;
 654:	8c 91       	ld	r24, X
	 return UDR0;
 }
 /* USART0 Flush of data */
void USART_Flush( void )
 {
	 while ( UCSR0A & (1<<RXC0) )
 656:	80 81       	ld	r24, Z
 658:	88 23       	and	r24, r24
 65a:	e4 f3       	brlt	.-8      	; 0x654 <USART_Flush+0x10>
 65c:	08 95       	ret

0000065e <zinit_app_init_function>:
 unsigned char zinit_app_init_function();


 unsigned char zinit_app_init_function()
 {
	PORTB=0x00;
 65e:	15 b8       	out	0x05, r1	; 5


 /* read last reset reason */
 static void reset_reason(void)
 {
	 if (MCUSR & 1)
 660:	04 b6       	in	r0, 0x34	; 52
 662:	00 fe       	sbrs	r0, 0
 664:	04 c0       	rjmp	.+8      	; 0x66e <zinit_app_init_function+0x10>
	 {
		 // Power-on Reset
		 reset_cause = RS_POWER_ON_RESET;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 19 01 	sts	0x0119, r24
 66c:	1f c0       	rjmp	.+62     	; 0x6ac <zinit_app_init_function+0x4e>
	 }
	 else if (MCUSR & 2)
 66e:	04 b6       	in	r0, 0x34	; 52
 670:	01 fe       	sbrs	r0, 1
 672:	04 c0       	rjmp	.+8      	; 0x67c <zinit_app_init_function+0x1e>
	 {
		 // External Reset
		 reset_cause = RS_EXTERNAL_RESET;
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	80 93 19 01 	sts	0x0119, r24
 67a:	18 c0       	rjmp	.+48     	; 0x6ac <zinit_app_init_function+0x4e>
	 }
	 else if (MCUSR & 4)
 67c:	04 b6       	in	r0, 0x34	; 52
 67e:	02 fe       	sbrs	r0, 2
 680:	04 c0       	rjmp	.+8      	; 0x68a <zinit_app_init_function+0x2c>
	 {
		 // Brown-Out Reset
		 reset_cause = RS_BROWN_OUT_RESET;
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	80 93 19 01 	sts	0x0119, r24
 688:	11 c0       	rjmp	.+34     	; 0x6ac <zinit_app_init_function+0x4e>
	 }
	 else if (MCUSR & 8)
 68a:	04 b6       	in	r0, 0x34	; 52
 68c:	03 fe       	sbrs	r0, 3
 68e:	04 c0       	rjmp	.+8      	; 0x698 <zinit_app_init_function+0x3a>
	 {
		 // Watchdog Reset
		 reset_cause = RS_WATCHDOG_RESET;
 690:	84 e0       	ldi	r24, 0x04	; 4
 692:	80 93 19 01 	sts	0x0119, r24
 696:	0a c0       	rjmp	.+20     	; 0x6ac <zinit_app_init_function+0x4e>
	 }
	 else if (MCUSR & 0x10)
 698:	04 b6       	in	r0, 0x34	; 52
 69a:	04 fe       	sbrs	r0, 4
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <zinit_app_init_function+0x48>
	 {
		 // JTAG Reset
		 reset_cause = RS_JTAG_RESET;
 69e:	85 e0       	ldi	r24, 0x05	; 5
 6a0:	80 93 19 01 	sts	0x0119, r24
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <zinit_app_init_function+0x4e>
	 }
	 else
	 {
		 reset_cause = RS_UNKNOWN_RESET; // undetermined (runaway code)
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	80 93 19 01 	sts	0x0119, r24
	 }
	 MCUSR&=0xE0;
 6ac:	84 b7       	in	r24, 0x34	; 52
 6ae:	80 7e       	andi	r24, 0xE0	; 224
 6b0:	84 bf       	out	0x34, r24	; 52
 unsigned char zinit_app_init_function()
 {
	PORTB=0x00;
		
	reset_reason();
	timers_timer3_init();
 6b2:	0e 94 9c 02 	call	0x538	; 0x538 <timers_timer3_init>
	

	timers_timer0_initialize_FAST_PWM();
 6b6:	0e 94 94 02 	call	0x528	; 0x528 <timers_timer0_initialize_FAST_PWM>
	USART_Init();	
 6ba:	0e 94 04 03 	call	0x608	; 0x608 <USART_Init>
	rf_USART_Init();
 6be:	0e 94 34 02 	call	0x468	; 0x468 <rf_USART_Init>
	adc_initialisation();
 6c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_initialisation>
	sei();
 6c6:	78 94       	sei
	return 0;
 }
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	08 95       	ret

000006cc <zapp_1ms_TASK>:



void zapp_1ms_TASK()
{
	lub_1ms++;
 6cc:	80 91 1a 01 	lds	r24, 0x011A
 6d0:	90 91 1b 01 	lds	r25, 0x011B
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	90 93 1b 01 	sts	0x011B, r25
 6da:	80 93 1a 01 	sts	0x011A, r24
}
 6de:	08 95       	ret

000006e0 <zapp_5ms_TASK>:

void zapp_5ms_TASK()
{
	lub_5ms++;
 6e0:	80 91 1c 01 	lds	r24, 0x011C
 6e4:	90 91 1d 01 	lds	r25, 0x011D
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	90 93 1d 01 	sts	0x011D, r25
 6ee:	80 93 1c 01 	sts	0x011C, r24
}
 6f2:	08 95       	ret

000006f4 <zapp_10ms_TASK>:

void zapp_10ms_TASK()
{
	lub_10ms++;
 6f4:	80 91 1e 01 	lds	r24, 0x011E
 6f8:	90 91 1f 01 	lds	r25, 0x011F
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	90 93 1f 01 	sts	0x011F, r25
 702:	80 93 1e 01 	sts	0x011E, r24
}
 706:	08 95       	ret

00000708 <zapp_20ms_TASK>:

void zapp_20ms_TASK()
{
	lub_20ms++;
 708:	80 91 20 01 	lds	r24, 0x0120
 70c:	90 91 21 01 	lds	r25, 0x0121
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	90 93 21 01 	sts	0x0121, r25
 716:	80 93 20 01 	sts	0x0120, r24
}
 71a:	08 95       	ret

0000071c <zapp_50ms_TASK>:

void zapp_50ms_TASK()
{
	lub_50ms++;
 71c:	80 91 22 01 	lds	r24, 0x0122
 720:	90 91 23 01 	lds	r25, 0x0123
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	90 93 23 01 	sts	0x0123, r25
 72a:	80 93 22 01 	sts	0x0122, r24
}
 72e:	08 95       	ret

00000730 <zapp_100ms_TASK>:

void zapp_100ms_TASK()
{
	lub_100ms++;
 730:	80 91 24 01 	lds	r24, 0x0124
 734:	90 91 25 01 	lds	r25, 0x0125
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	90 93 25 01 	sts	0x0125, r25
 73e:	80 93 24 01 	sts	0x0124, r24
	adc_update_filtered_result();
 742:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <adc_update_filtered_result>
}
 746:	08 95       	ret

00000748 <zapp_1sec_TASK>:

void zapp_1sec_TASK()
{
	lub_1sec;
	//tr_update_temp();
	tr_get_updated_adc_values();
 748:	0e 94 53 01 	call	0x2a6	; 0x2a6 <tr_get_updated_adc_values>
 74c:	08 95       	ret

0000074e <__fixunssfsi>:
 74e:	70 d0       	rcall	.+224    	; 0x830 <__fp_splitA>
 750:	88 f0       	brcs	.+34     	; 0x774 <__fixunssfsi+0x26>
 752:	9f 57       	subi	r25, 0x7F	; 127
 754:	90 f0       	brcs	.+36     	; 0x77a <__fixunssfsi+0x2c>
 756:	b9 2f       	mov	r27, r25
 758:	99 27       	eor	r25, r25
 75a:	b7 51       	subi	r27, 0x17	; 23
 75c:	a0 f0       	brcs	.+40     	; 0x786 <__fixunssfsi+0x38>
 75e:	d1 f0       	breq	.+52     	; 0x794 <__fixunssfsi+0x46>
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	1a f0       	brmi	.+6      	; 0x770 <__fixunssfsi+0x22>
 76a:	ba 95       	dec	r27
 76c:	c9 f7       	brne	.-14     	; 0x760 <__fixunssfsi+0x12>
 76e:	12 c0       	rjmp	.+36     	; 0x794 <__fixunssfsi+0x46>
 770:	b1 30       	cpi	r27, 0x01	; 1
 772:	81 f0       	breq	.+32     	; 0x794 <__fixunssfsi+0x46>
 774:	77 d0       	rcall	.+238    	; 0x864 <__fp_zero>
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	08 95       	ret
 77a:	74 c0       	rjmp	.+232    	; 0x864 <__fp_zero>
 77c:	67 2f       	mov	r22, r23
 77e:	78 2f       	mov	r23, r24
 780:	88 27       	eor	r24, r24
 782:	b8 5f       	subi	r27, 0xF8	; 248
 784:	39 f0       	breq	.+14     	; 0x794 <__fixunssfsi+0x46>
 786:	b9 3f       	cpi	r27, 0xF9	; 249
 788:	cc f3       	brlt	.-14     	; 0x77c <__fixunssfsi+0x2e>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b3 95       	inc	r27
 792:	d9 f7       	brne	.-10     	; 0x78a <__fixunssfsi+0x3c>
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__fixunssfsi+0x56>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__floatunsisf>:
 7a6:	e8 94       	clt
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <__floatsisf+0x12>

000007aa <__floatsisf>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	3e f4       	brtc	.+14     	; 0x7bc <__floatsisf+0x12>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	99 23       	and	r25, r25
 7be:	a9 f0       	breq	.+42     	; 0x7ea <__floatsisf+0x40>
 7c0:	f9 2f       	mov	r31, r25
 7c2:	96 e9       	ldi	r25, 0x96	; 150
 7c4:	bb 27       	eor	r27, r27
 7c6:	93 95       	inc	r25
 7c8:	f6 95       	lsr	r31
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f1 11       	cpse	r31, r1
 7d4:	f8 cf       	rjmp	.-16     	; 0x7c6 <__floatsisf+0x1c>
 7d6:	fa f4       	brpl	.+62     	; 0x816 <__floatsisf+0x6c>
 7d8:	bb 0f       	add	r27, r27
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__floatsisf+0x36>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	1b c0       	rjmp	.+54     	; 0x816 <__floatsisf+0x6c>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <__floatsisf+0x6c>
 7ea:	88 23       	and	r24, r24
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <__floatsisf+0x48>
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <__floatsisf+0x6a>
 7f2:	77 23       	and	r23, r23
 7f4:	21 f0       	breq	.+8      	; 0x7fe <__floatsisf+0x54>
 7f6:	9e e8       	ldi	r25, 0x8E	; 142
 7f8:	87 2f       	mov	r24, r23
 7fa:	76 2f       	mov	r23, r22
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__floatsisf+0x5e>
 7fe:	66 23       	and	r22, r22
 800:	71 f0       	breq	.+28     	; 0x81e <__floatsisf+0x74>
 802:	96 e8       	ldi	r25, 0x86	; 134
 804:	86 2f       	mov	r24, r22
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	2a f0       	brmi	.+10     	; 0x816 <__floatsisf+0x6c>
 80c:	9a 95       	dec	r25
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	da f7       	brpl	.-10     	; 0x80c <__floatsisf+0x62>
 816:	88 0f       	add	r24, r24
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_split3>:
 820:	57 fd       	sbrc	r21, 7
 822:	90 58       	subi	r25, 0x80	; 128
 824:	44 0f       	add	r20, r20
 826:	55 1f       	adc	r21, r21
 828:	59 f0       	breq	.+22     	; 0x840 <__fp_splitA+0x10>
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	71 f0       	breq	.+28     	; 0x84a <__fp_splitA+0x1a>
 82e:	47 95       	ror	r20

00000830 <__fp_splitA>:
 830:	88 0f       	add	r24, r24
 832:	97 fb       	bst	r25, 7
 834:	99 1f       	adc	r25, r25
 836:	61 f0       	breq	.+24     	; 0x850 <__fp_splitA+0x20>
 838:	9f 3f       	cpi	r25, 0xFF	; 255
 83a:	79 f0       	breq	.+30     	; 0x85a <__fp_splitA+0x2a>
 83c:	87 95       	ror	r24
 83e:	08 95       	ret
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	14 06       	cpc	r1, r20
 846:	55 1f       	adc	r21, r21
 848:	f2 cf       	rjmp	.-28     	; 0x82e <__fp_split3+0xe>
 84a:	46 95       	lsr	r20
 84c:	f1 df       	rcall	.-30     	; 0x830 <__fp_splitA>
 84e:	08 c0       	rjmp	.+16     	; 0x860 <__fp_splitA+0x30>
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	99 1f       	adc	r25, r25
 858:	f1 cf       	rjmp	.-30     	; 0x83c <__fp_splitA+0xc>
 85a:	86 95       	lsr	r24
 85c:	71 05       	cpc	r23, r1
 85e:	61 05       	cpc	r22, r1
 860:	08 94       	sec
 862:	08 95       	ret

00000864 <__fp_zero>:
 864:	e8 94       	clt

00000866 <__fp_szero>:
 866:	bb 27       	eor	r27, r27
 868:	66 27       	eor	r22, r22
 86a:	77 27       	eor	r23, r23
 86c:	cb 01       	movw	r24, r22
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__mulsf3>:
 872:	0b d0       	rcall	.+22     	; 0x88a <__mulsf3x>
 874:	78 c0       	rjmp	.+240    	; 0x966 <__fp_round>
 876:	69 d0       	rcall	.+210    	; 0x94a <__fp_pscA>
 878:	28 f0       	brcs	.+10     	; 0x884 <__mulsf3+0x12>
 87a:	6e d0       	rcall	.+220    	; 0x958 <__fp_pscB>
 87c:	18 f0       	brcs	.+6      	; 0x884 <__mulsf3+0x12>
 87e:	95 23       	and	r25, r21
 880:	09 f0       	breq	.+2      	; 0x884 <__mulsf3+0x12>
 882:	5a c0       	rjmp	.+180    	; 0x938 <__fp_inf>
 884:	5f c0       	rjmp	.+190    	; 0x944 <__fp_nan>
 886:	11 24       	eor	r1, r1
 888:	ee cf       	rjmp	.-36     	; 0x866 <__fp_szero>

0000088a <__mulsf3x>:
 88a:	ca df       	rcall	.-108    	; 0x820 <__fp_split3>
 88c:	a0 f3       	brcs	.-24     	; 0x876 <__mulsf3+0x4>

0000088e <__mulsf3_pse>:
 88e:	95 9f       	mul	r25, r21
 890:	d1 f3       	breq	.-12     	; 0x886 <__mulsf3+0x14>
 892:	95 0f       	add	r25, r21
 894:	50 e0       	ldi	r21, 0x00	; 0
 896:	55 1f       	adc	r21, r21
 898:	62 9f       	mul	r22, r18
 89a:	f0 01       	movw	r30, r0
 89c:	72 9f       	mul	r23, r18
 89e:	bb 27       	eor	r27, r27
 8a0:	f0 0d       	add	r31, r0
 8a2:	b1 1d       	adc	r27, r1
 8a4:	63 9f       	mul	r22, r19
 8a6:	aa 27       	eor	r26, r26
 8a8:	f0 0d       	add	r31, r0
 8aa:	b1 1d       	adc	r27, r1
 8ac:	aa 1f       	adc	r26, r26
 8ae:	64 9f       	mul	r22, r20
 8b0:	66 27       	eor	r22, r22
 8b2:	b0 0d       	add	r27, r0
 8b4:	a1 1d       	adc	r26, r1
 8b6:	66 1f       	adc	r22, r22
 8b8:	82 9f       	mul	r24, r18
 8ba:	22 27       	eor	r18, r18
 8bc:	b0 0d       	add	r27, r0
 8be:	a1 1d       	adc	r26, r1
 8c0:	62 1f       	adc	r22, r18
 8c2:	73 9f       	mul	r23, r19
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	62 1f       	adc	r22, r18
 8ca:	83 9f       	mul	r24, r19
 8cc:	a0 0d       	add	r26, r0
 8ce:	61 1d       	adc	r22, r1
 8d0:	22 1f       	adc	r18, r18
 8d2:	74 9f       	mul	r23, r20
 8d4:	33 27       	eor	r19, r19
 8d6:	a0 0d       	add	r26, r0
 8d8:	61 1d       	adc	r22, r1
 8da:	23 1f       	adc	r18, r19
 8dc:	84 9f       	mul	r24, r20
 8de:	60 0d       	add	r22, r0
 8e0:	21 1d       	adc	r18, r1
 8e2:	82 2f       	mov	r24, r18
 8e4:	76 2f       	mov	r23, r22
 8e6:	6a 2f       	mov	r22, r26
 8e8:	11 24       	eor	r1, r1
 8ea:	9f 57       	subi	r25, 0x7F	; 127
 8ec:	50 40       	sbci	r21, 0x00	; 0
 8ee:	8a f0       	brmi	.+34     	; 0x912 <__mulsf3_pse+0x84>
 8f0:	e1 f0       	breq	.+56     	; 0x92a <__mulsf3_pse+0x9c>
 8f2:	88 23       	and	r24, r24
 8f4:	4a f0       	brmi	.+18     	; 0x908 <__mulsf3_pse+0x7a>
 8f6:	ee 0f       	add	r30, r30
 8f8:	ff 1f       	adc	r31, r31
 8fa:	bb 1f       	adc	r27, r27
 8fc:	66 1f       	adc	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	91 50       	subi	r25, 0x01	; 1
 904:	50 40       	sbci	r21, 0x00	; 0
 906:	a9 f7       	brne	.-22     	; 0x8f2 <__mulsf3_pse+0x64>
 908:	9e 3f       	cpi	r25, 0xFE	; 254
 90a:	51 05       	cpc	r21, r1
 90c:	70 f0       	brcs	.+28     	; 0x92a <__mulsf3_pse+0x9c>
 90e:	14 c0       	rjmp	.+40     	; 0x938 <__fp_inf>
 910:	aa cf       	rjmp	.-172    	; 0x866 <__fp_szero>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	ec f3       	brlt	.-6      	; 0x910 <__mulsf3_pse+0x82>
 916:	98 3e       	cpi	r25, 0xE8	; 232
 918:	dc f3       	brlt	.-10     	; 0x910 <__mulsf3_pse+0x82>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b7 95       	ror	r27
 922:	f7 95       	ror	r31
 924:	e7 95       	ror	r30
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	c1 f7       	brne	.-16     	; 0x91a <__mulsf3_pse+0x8c>
 92a:	fe 2b       	or	r31, r30
 92c:	88 0f       	add	r24, r24
 92e:	91 1d       	adc	r25, r1
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	97 f9       	bld	r25, 7
 936:	08 95       	ret

00000938 <__fp_inf>:
 938:	97 f9       	bld	r25, 7
 93a:	9f 67       	ori	r25, 0x7F	; 127
 93c:	80 e8       	ldi	r24, 0x80	; 128
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	08 95       	ret

00000944 <__fp_nan>:
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	80 ec       	ldi	r24, 0xC0	; 192
 948:	08 95       	ret

0000094a <__fp_pscA>:
 94a:	00 24       	eor	r0, r0
 94c:	0a 94       	dec	r0
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	18 06       	cpc	r1, r24
 954:	09 06       	cpc	r0, r25
 956:	08 95       	ret

00000958 <__fp_pscB>:
 958:	00 24       	eor	r0, r0
 95a:	0a 94       	dec	r0
 95c:	12 16       	cp	r1, r18
 95e:	13 06       	cpc	r1, r19
 960:	14 06       	cpc	r1, r20
 962:	05 06       	cpc	r0, r21
 964:	08 95       	ret

00000966 <__fp_round>:
 966:	09 2e       	mov	r0, r25
 968:	03 94       	inc	r0
 96a:	00 0c       	add	r0, r0
 96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0xc>
 96e:	88 23       	and	r24, r24
 970:	52 f0       	brmi	.+20     	; 0x986 <__fp_round+0x20>
 972:	bb 0f       	add	r27, r27
 974:	40 f4       	brcc	.+16     	; 0x986 <__fp_round+0x20>
 976:	bf 2b       	or	r27, r31
 978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0x18>
 97a:	60 ff       	sbrs	r22, 0
 97c:	04 c0       	rjmp	.+8      	; 0x986 <__fp_round+0x20>
 97e:	6f 5f       	subi	r22, 0xFF	; 255
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	8f 4f       	sbci	r24, 0xFF	; 255
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	08 95       	ret

00000988 <__udivmodhi4>:
 988:	aa 1b       	sub	r26, r26
 98a:	bb 1b       	sub	r27, r27
 98c:	51 e1       	ldi	r21, 0x11	; 17
 98e:	07 c0       	rjmp	.+14     	; 0x99e <__udivmodhi4_ep>

00000990 <__udivmodhi4_loop>:
 990:	aa 1f       	adc	r26, r26
 992:	bb 1f       	adc	r27, r27
 994:	a6 17       	cp	r26, r22
 996:	b7 07       	cpc	r27, r23
 998:	10 f0       	brcs	.+4      	; 0x99e <__udivmodhi4_ep>
 99a:	a6 1b       	sub	r26, r22
 99c:	b7 0b       	sbc	r27, r23

0000099e <__udivmodhi4_ep>:
 99e:	88 1f       	adc	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	5a 95       	dec	r21
 9a4:	a9 f7       	brne	.-22     	; 0x990 <__udivmodhi4_loop>
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	bc 01       	movw	r22, r24
 9ac:	cd 01       	movw	r24, r26
 9ae:	08 95       	ret

000009b0 <_exit>:
 9b0:	f8 94       	cli

000009b2 <__stop_program>:
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <__stop_program>
